#pragma version >=0.4.1;

#include "shared/stdlib.fc";
#include "shared/jetton-utils.fc";
#include "shared/jetton-op-codes.fc";
#include "shared/messages.fc";

#include "vamm/op-codes.fc";
#include "vamm/constants.fc";
#include "vamm/storage.fc";
#include "vamm/errors.fc";
#include "vamm/utils.fc";
#include "vamm/handlers.fc";
#include "vamm/requests.fc";

#include "position-wallet/packers.fc";

#include "oracle/op-codes.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    throw_if(0, in_msg_body.slice_empty?()); ;; ignore all empty messages

    slice cs = in_msg_full.begin_parse();
    throw_if(0, cs~load_uint(4) & 1); ;; ignore all bounced messages

    slice sender_addr = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    if (op == op::oracle_price_response) {
        handle::oracle_response(in_msg_body, sender_addr, my_balance, msg_value);
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification) {
        handle::transfer_notification(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::close_position) {
        request::close_position(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::remove_margin) {
        request::remove_margin(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::pay_funding) {
        request::pay_funding(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::liquidate) {
        request::liquidate(in_msg_body, sender_addr, query_id, msg_value);
        return ();
    }

    if (op == op::position_request_withdraw) {
        handle::position_request_withdraw(in_msg_body, sender_addr, query_id);
        return ();
    }

    if (op == op::set_jetton_wallet_address) {
        slice ds = get_data().begin_parse();
        ds~load_coins();
        ds~load_msg_addr();

        ;; update jetton_wallet_addr only if previous is addr_none
        int inited? =  ds.preload_uint(2) != 0;

        throw_unless(error::inited, inited?);
        load_data();
        
        slice db::jetton_wallet_addr = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }

    throw(error::wrong_op);
}

_ get_amm_data() method_id {
    return load_raw_data();
}

slice get_trader_position_address(slice trader_addr) method_id {
    load_data();
    var (_, _, _, _, _, cell position_wallet_code) = unpack_extra_data(db::extra_data_cell.begin_parse());
    var (_, slice trader_position_addr) = get_position_state_init_and_address(position_wallet_code, my_address(), trader_addr);
    return trader_position_addr;
}
