#pragma version >=0.4.1;

#include "shared/stdlib.fc";
#include "shared/messages.fc";

#include "position-wallet/op-codes.fc";
#include "position-wallet/errors.fc";
#include "position-wallet/storage.fc";

;; should unlock position state on provide_position bounce
;; () on_bounce(slice in_msg_body) impure inline { 
;;     int op = in_msg_body.preload_uint(32);

;;     if (op == op::provide_position_response) {
;;         load_data();
;;         ctx::is_busy = 0;
;;         slice position_s = ctx::position_ref.begin_parse();
;;         slice trader_addr = position_s~load_msg_addr();
;;         send_empty_message(0, trader_addr, mode::carry_remaining_gas + mode::ignore_errors);
;;         save_data();
;;         return ();
;;     }
;; }

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; on_bounce(in_msg_body);
        ;; Now on_bounce is useless because this msg goes as position->oracle->vamm. This should be rewriten as oracle->position->vamm.
        ;; Then on_bounce wiil make sense as soon as vamm can unexpectedly fail in compute phase 
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);

    if (op == op::provide_position) {
        load_data();
        throw_if(error::busy, ctx::is_busy);
        throw_unless(error::not_an_amm, equal_slices(sender_addr, ctx::vamm_addr));

        ctx::is_busy = 1;

        slice redirect_addr = in_msg_body~load_msg_addr();

        var body = begin_cell().store_slice(in_msg_body).store_ref(ctx::position_ref);
        send_simple_message(0, redirect_addr, body, mode::carry_remaining_gas);

        save_data();
        return ();
    }

    if (op == op::update_position) {
        load_data();
        throw_unless(error::busy, ctx::is_busy);
        throw_unless(error::not_an_amm, equal_slices(sender_addr, ctx::vamm_addr));

        ctx::is_busy = 0;
        ctx::position_ref = in_msg_body.preload_ref();
        
        slice position_s = ctx::position_ref.begin_parse();
        send_empty_message(0, position_s~load_msg_addr(), mode::carry_remaining_gas);
        
        save_data();
        return ();
    }

    if (op == op::unlock_position) {
        load_data();
        throw_unless(error::not_an_amm, equal_slices(sender_addr, ctx::vamm_addr));

        ctx::is_busy = 0;

        slice position_s = ctx::position_ref.begin_parse();
        send_empty_message(0, position_s~load_msg_addr(), mode::carry_remaining_gas + mode::ignore_errors);
        
        save_data();
        return ();
    }

    throw(0xffff); 
}


(slice, int, cell) get_position_data() method_id {
    return load_raw_data();
}