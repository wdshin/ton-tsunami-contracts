cell pack_extra_data(slice vault_addr, slice admin_addr, int paused, int closed_only, int index_id, cell trader_position_wallet_code) inline {
  return begin_cell()
    .store_slice(vault_addr)
    .store_slice(admin_addr)
    .store_uint(paused, 1)
    .store_uint(closed_only, 1)
    .store_uint(index_id, 16)
    .store_ref(trader_position_wallet_code)
    .end_cell();
}

_ unpack_extra_data(slice ds) inline {
  return (
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_uint(1),
    ds~load_uint(1),
    ds~load_uint(16),
    ds~load_ref()
  );
}

_ unpack_exchange_settings(slice ds) inline {
  return (
    ds~load_uint(32), ;; db::fee;                                      
    ds~load_uint(32), ;; db::rolloverFee;                              
    ds~load_uint(32), ;; db::fundingPeriod;                            
    ds~load_uint(32), ;; db::initMarginRatio;                          
    ds~load_uint(32), ;; db::maintenanceMarginRatio;                   
    ds~load_uint(32), ;; db::liquidationFeeRatio;                      
    ds~load_uint(32), ;; db::partialLiquidationRatio;                  
    ds~load_uint(32), ;; db::spreadLimit;                              
    ds~load_uint(32), ;; db::maxPriceImpact;                           
    ds~load_uint(32), ;; db::maxPriceSpread;                           
    ds~load_coins(), ;; db::maxOpenNotional;                          
    ds~load_uint(32), ;; db::feeToStakersPercent;                      
    ds~load_uint(32) ;; db::maxOracleDelay;                           
  );
}

cell pack_exchange_settings(
  int fee,
  int rolloverFee,
  int fundingPeriod,
  int initMarginRatio,
  int maintenanceMarginRatio,
  int liquidationFeeRatio,
  int partialLiquidationRatio,
  int spreadLimit,
  int maxPriceImpact,
  int maxPriceSpread,
  int maxOpenNotional,
  int feeToStakersPercent,
  int maxOracleDelay) {
  return begin_cell()
            .store_uint(fee ,32) ;; db::fee;                                      
            .store_uint(rolloverFee ,32) ;; db::rolloverFee;                              
            .store_uint(fundingPeriod ,32) ;; db::fundingPeriod;                            
            .store_uint(initMarginRatio ,32) ;; db::initMarginRatio;                          
            .store_uint(maintenanceMarginRatio ,32) ;; db::maintenanceMarginRatio;                   
            .store_uint(liquidationFeeRatio ,32) ;; db::liquidationFeeRatio;                      
            .store_uint(partialLiquidationRatio ,32) ;; db::partialLiquidationRatio;                  
            .store_uint(spreadLimit ,32) ;; db::spreadLimit;                              
            .store_uint(maxPriceImpact ,32) ;; db::maxPriceImpact;                           
            .store_uint(maxPriceSpread ,32) ;; db::maxPriceSpread;                           
            .store_coins(maxOpenNotional) ;; db::maxOpenNotional;                          
            .store_uint(feeToStakersPercent ,32) ;; db::feeToStakersPercent;                      
            .store_uint(maxOracleDelay ,32) ;; db::maxOracleDelay;                           
            .end_cell();
}

_ unpack_amm_state(slice ds) inline {
  return (
    ds~load_coins(), ;; quoteAssetReserve
    ds~load_coins(), ;; baseAssetReserve
    ds~load_uint(32), ;; quoteAssetWeight
    ds~load_coins(), ;; totalLongPositionSize
    ds~load_coins(), ;; totalShortPositionSize
    ds~load_coins(), ;; openInterestLong
    ds~load_coins() ;; openInterestShort
  );
}

cell pack_amm_state(
  int quoteAssetReserve,
  int baseAssetReserve,
  int quoteAssetWeight,
  int totalLongPositionSize,
  int totalShortPositionSize,
  int openInterestLong,
  int openInterestShort
) {
  return begin_cell()
          .store_coins(quoteAssetReserve)
          .store_coins(baseAssetReserve)
          .store_uint(quoteAssetWeight, 32)
          .store_coins(totalLongPositionSize)
          .store_coins(totalShortPositionSize)
          .store_coins(openInterestLong)
          .store_coins(openInterestShort)
          .end_cell();
}

_ unpack_funding_state(slice ds) inline {
  return (
    ds~load_coins(), ;; latestLongCumulativePremiumFraction
    ds~load_coins(), ;; latestShortCumulativePremiumFraction
    ds~load_uint(32),   ;; nextFundingBlockTimestamp
    ds~load_uint(2),   ;; fundingMode
    ds~load_uint(32),   ;; longFundingRate
    ds~load_uint(32)   ;; shortFundingRate
  );
}

cell pack_funding_state(
  int latestLongCumulativePremiumFraction,
  int latestShortCumulativePremiumFraction,
  int nextFundingBlockTimestamp,
  int fundingMode,
  int longFundingRate,
  int shortFundingRate
) {
  return begin_cell()
          .store_coins(latestLongCumulativePremiumFraction)
          .store_coins(latestShortCumulativePremiumFraction)
          .store_uint(nextFundingBlockTimestamp, 32)
          .store_uint(fundingMode, 2)
          .store_uint(longFundingRate, 32)
          .store_uint(shortFundingRate, 32)
          .end_cell();
}

;; TODO: use later in Vault contract
;; cell pack_vamm_data(slice router_addr, cell trader_position_wallet_code) inline_ref {
;;   return begin_cell()
;;       .store_coins(0) ;; balance
;;       .store_coins(0) ;; oraclePrice
;;       .store_slice(router_addr)
;;       .store_ref(
;;     pack_exchange_settings(
;;       1200, ;; fee 0.0012 * 1000000
;;       1, ;; rolloverFee 0.000001 * 1000000
;;       3600, ;; fundingPeriod
;;       300000, ;; initMarginRatio 0.3 * 1000000
;;       85000, ;; maintenanceMarginRatio 0.085 * 100000
;;       10000, ;; liquidationFeeRatio 0.01 * 100000
;;       150000, ;; partialLiquidationRatio 0.15 * 100000
;;       100000, ;; spreadLimit 0.1 * 100000
;;       80000, ;; maxPriceImpact 0.08 * 100000
;;       400000, ;; maxPriceSpread 0.4 * 100000
;;       100000000000000, ;; maxOpenNotional 100_000_000 * 100000
;;       500000, ;; feeToStakersPercent 0.5 * 100000
;;       1 ;; 1
;;     ))
;;       .store_ref(
;;     pack_amm_state(
;;       0, ;; quoteAssetReserve
;;       0, ;; baseAssetReserve
;;       1000000, ;; quoteAssetWeight 1 * 1000000
;;       0, ;; totalLongPositionSize
;;       0, ;; totalShortPositionSize
;;       0, ;; openInterestShort
;;       0 ;; openInterestLong
;;     ))
;;           .store_ref(
;;     pack_funding_state(
;;       0, ;; latestLongCumulativePremiumFraction
;;       0, ;; latestShortCumulativePremiumFraction
;;       0, ;; nextFundingBlockTimestamp
;;       1, ;; fundingMode assymetric
;;       0, ;; longFundingRate
;;       0  ;;shortFundingRate
;;     ))
;;       .store_ref(trader_position_wallet_code)
;;       .end_cell();
;; }