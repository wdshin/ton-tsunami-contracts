#include "./packers.fc";

global int db::balance;
global slice db::oracle_addr;
global slice db::jetton_wallet_addr;

;; Unused, needs to create different amm's jetton/index

;; exchange_settings
global int db::fee;                                       ;; Exchange fee. Default is 1%. 1/2 goes to stakers, 1/2 goes to insurance fund
global int db::rolloverFee;                               ;; Rollover fee per minute. Default 35% per year.
global int db::fundingPeriod;                             ;; Funding period. By default funding is paid once per hour
global int db::initMarginRatio;                           ;; Initial margin ratio. Controls how much leverage can be applied when position is created
global int db::maintenanceMarginRatio;                    ;; Maintenance margin ratio (MMR). When MR < MMR position can be liquidated
global int db::liquidationFeeRatio;                       ;; % of position size liquidator will get for himself. 1/2 of this goes to liquidator, 1/2 - to insurance fund
global int db::partialLiquidationRatio;                   ;; % of position notional that will be liquidated in case 0 < MR < MMR
global int db::spreadLimit;                               ;; abs((marketPrice - oraclePrice) / oraclePrice). If over spread limit, liquidations consult oracle price
global int db::maxPriceImpact;                            ;; maximum price impact per order
global int db::maxPriceSpread;                            ;; max spread between Index and Market Price
global int db::maxOpenNotional;                           ;; max open notional in market
global int db::feeToStakersPercent;                       ;; percent of fee to stakers (rest goes to vault) 
global int db::maxOracleDelay;                            ;; k_maxOracleDelay

;; amm state
global int db::quoteAssetReserve;        ;; Quote Asset Reserve (AMM)
global int db::baseAssetReserve;         ;; Base Asset Reserve (AMM)
global int db::quoteAssetWeight;         ;; Quote Asset Weight
global int db::baseAssetWeight;        ;; Base Asset Weight
global int db::totalLongPositionSize;        ;; Total LONG trader position size (in Base asset)
global int db::totalShortPositionSize;         ;; Total SHORT trader position size (in Base asset)
global int db::openInterestShort;        ;; Open Interest Notional (short)
global int db::openInterestLong;         ;; Open Interest Notional (long)

;; funding data
global int db::latestLongCumulativePremiumFraction; ;; 128
global int db::latestShortCumulativePremiumFraction; ;; 128
global int db::nextFundingBlockTimestamp; ;; 32
global int db::fundingMode; ;; 2
global int db::longFundingRate; ;; 32
global int db::shortFundingRate; ;; 32

;; slice vault_addr;
;; slice admin_addr;
;; int index_id; ;; 2 ** 16
;; cell position_wallet_code;
global cell db::extra_data_cell;

_ load_raw_data() impure inline {
  slice ds = get_data().begin_parse();

  
  return (
    ds~load_coins(),
    ds~load_msg_addr(),
    ds~load_msg_addr(),
    ds~load_ref(),
    ds~load_ref(),
    ds~load_ref(),
    ds.preload_ref()
  );
}

(slice, slice, cell) select_transfer_data() impure inline {
  slice ds = get_data().begin_parse();

  ds~load_coins(); ;; balance
  slice oracle_addr = ds~load_msg_addr(); 
  slice jetton_wallet_addr = ds~load_msg_addr(); 

  ds~load_ref(); ;; exchange_settings
  ds~load_ref(); ;; amm_state
  ds~load_ref(); ;; funding_state
  cell extra_data_cell = ds.preload_ref();

  return (
    oracle_addr,
    jetton_wallet_addr,
    extra_data_cell.begin_parse().preload_ref() ;; position_wallet_code
  );
}

slice select_oracle_address() impure inline {
  slice ds = get_data().begin_parse();
  ds~load_coins(); ;; balance

  return (
    ds~load_msg_addr() ;; oracle_addr
  );
}

() load_data() impure inline {
  slice ds = get_data().begin_parse();

  db::balance = ds~load_coins();
  db::oracle_addr = ds~load_msg_addr(); 
  db::jetton_wallet_addr = ds~load_msg_addr();

  var (
    db::fee,
    db::rolloverFee,
    db::fundingPeriod,
    db::initMarginRatio,
    db::maintenanceMarginRatio,
    db::liquidationFeeRatio,
    db::partialLiquidationRatio,
    db::spreadLimit,
    db::maxPriceImpact,
    db::maxPriceSpread,
    db::maxOpenNotional,
    db::feeToStakersPercent,
    db::maxOracleDelay
  ) = unpack_exchange_settings(ds~load_ref().begin_parse());

  var (
    db::quoteAssetReserve,
    db::baseAssetReserve,
    db::quoteAssetWeight,
    db::totalLongPositionSize,
    db::totalShortPositionSize,
    db::openInterestShort,
    db::openInterestLong
  ) = unpack_amm_state(ds~load_ref().begin_parse());

  var (
    db::latestLongCumulativePremiumFraction,
    db::latestShortCumulativePremiumFraction,
    db::nextFundingBlockTimestamp,
    db::fundingMode,
    db::longFundingRate,
    db::shortFundingRate
  ) = unpack_funding_state(ds~load_ref().begin_parse());

  ;; TODO: 31 global var max, so we cant unpack this and should load to cell instead
  ;; var (
  ;;   db::admin_addr,
  ;;   db::index_id,
  ;;   db::position_wallet_code
  ;; ) = unpack_extra_data(ds.preload_ref().begin_parse());

  db::extra_data_cell = ds.preload_ref();
}

() save_data() impure inline {
  set_data(
    begin_cell()
      .store_coins(db::balance)
      .store_slice(db::oracle_addr)
    ;; .store_slice(db::vault_addr)
      .store_slice(db::jetton_wallet_addr)
      .store_ref(pack_exchange_settings(
        db::fee,
        db::rolloverFee,
        db::fundingPeriod,
        db::initMarginRatio,
        db::maintenanceMarginRatio,
        db::liquidationFeeRatio,
        db::partialLiquidationRatio,
        db::spreadLimit,
        db::maxPriceImpact,
        db::maxPriceSpread,
        db::maxOpenNotional,
        db::feeToStakersPercent,
        db::maxOracleDelay
      ))
      .store_ref(pack_amm_state(
        db::quoteAssetReserve,
        db::baseAssetReserve,
        db::quoteAssetWeight,
        db::totalLongPositionSize,
        db::totalShortPositionSize,
        db::openInterestShort,
        db::openInterestLong
      ))
      .store_ref(pack_funding_state(
        db::latestLongCumulativePremiumFraction,
        db::latestShortCumulativePremiumFraction,
        db::nextFundingBlockTimestamp,
        db::fundingMode,
        db::longFundingRate,
        db::shortFundingRate
      ))
    ;; .store_ref(pack_extra_data(db::admin_addr, db::index_id, db::position_wallet_code))
      .store_ref(db::extra_data_cell)
      .end_cell()
  );
}