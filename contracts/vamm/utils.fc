#include "../shared/stdlib.fc";
#include "../shared/messages.fc";
#include "../shared/utils.fc";

#include "../position-wallet/packers.fc";

#include "./errors.fc";
#include "./constants.fc";
#include "./storage.fc";
#include "./op-codes.fc";

int divd(int _x, int _y) inline {
  return muldivr(_x, DECIMAL_UNIT, _y);
}
int muld(int _x, int _y) inline {
  return muldivr(_x, _y, DECIMAL_UNIT);
}

int get_position_fee(int old_fee) inline {
  return old_fee ? old_fee : db::fee;
}

() require_position_address(slice sender_address, slice trader_addr) impure inline {
  slice extra_data_s = db::extra_data_cell.begin_parse();
  cell position_code = extra_data_s.preload_ref();
  var (_, slice position_addr) = get_position_state_init_and_address(position_code, my_address(), trader_addr);

  throw_unless(error::wrong_position_address, equal_slices(sender_address, position_addr));
}

cell pack_position_init_data(slice trader_addr, slice vamm_addr) {
  return begin_cell()
          .store_slice(vamm_addr)
          .store_uint(0, 1) ;; is_busy
          .store_ref(pack_position_data(trader_addr, 0, 0, 0, 0, 0, 0))
          .end_cell();
}

_ unlock_position(slice sender_addr, int value, int mode) impure inline {
  var body = begin_cell()
    .store_uint(op::unlock_position, 32);

  send_simple_message(0, sender_addr, body, mode);
}

_ update_position(cell new_position_ref, int origin_op, int query_id, slice sender_addr, int value, int mode) impure inline_ref {
  ;; quoteAstR, baseAstR, quoteAstW
  ;; send message to update and unlock trader position;
  var new_position_body = begin_cell()
    .store_uint(op::update_position, 32)
    .store_uint(query_id, 64)
    .store_uint(origin_op, 32)
    .store_coins(db::quoteAssetReserve)
    .store_coins(db::quoteAssetWeight)
    .store_coins(db::baseAssetReserve)
    .store_ref(new_position_ref);

  send_simple_message(value, sender_addr, new_position_body, mode);
}

cell calculate_position_wallet_state_init(cell jetton_wallet_code, slice trader_addr, slice vamm_addr) inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(jetton_wallet_code)
          .store_dict(pack_position_init_data(trader_addr, vamm_addr))
          .store_uint(0, 1)
          .end_cell();
}

int calcRolloverFee(int _oldPositionMargin, int _oldPositionLastUpdatedTimestamp) inline {
  int positionMinutes = ((now() - _oldPositionLastUpdatedTimestamp) / 60) * DECIMAL_UNIT;
  return divd(_oldPositionMargin.muld(positionMinutes).muld(db::rolloverFee), MINUTES_IN_YEAR);
}

int latestCumulativePremiumFraction(int _positionSize) inline {
  return _positionSize > 0 ? db::latestLongCumulativePremiumFraction : db::latestShortCumulativePremiumFraction;
}


int requireMoreMarginRatio(int _marginRatio, int _baseMarginRatio, int _largerThanOrEqualTo) inline {
  int remainingMarginRatio = _marginRatio - _baseMarginRatio;
  if (_largerThanOrEqualTo & (remainingMarginRatio < 0)) {
    return false;
  } else {
    if (~ _largerThanOrEqualTo & (remainingMarginRatio >= 0)) {
      return false;
    } else {
      return true;
    }
  }
}

_ updateReserve(int _isAdd, int _quoteAssetAmount, int _baseAssetAmount) inline_ref {
  if (_isAdd) {
    int newBase = db::baseAssetReserve - _baseAssetAmount;
    if (newBase <= 0) {
      ;; TODO: soft throw when Tx lead to base asset reserve <= 0, revert
      return (0, 0);
    } else {
      return (
        db::quoteAssetReserve + _quoteAssetAmount,
        newBase
      );
    }
  } else {
    int newQuote = db::quoteAssetReserve - _quoteAssetAmount;
    if (newQuote <= 0) {
      ;; TODO: soft throw when Tx lead to base quote reserve <= 0, revert
      return (0, 0);
    } else {
      return (
        newQuote,
        db::baseAssetReserve + _baseAssetAmount
      );
    }
  }
}

_ swapInput(int _isAdd, int _quoteAssetAmount) inline_ref {
  int _qtAstR = db::quoteAssetReserve;
  int _bsAstR = db::baseAssetReserve;
  int _qtAstW = db::quoteAssetWeight;
  int _bsAstW = DECIMAL_UNIT;

  int quoteAssetAmountAdjusted = _quoteAssetAmount.divd(_qtAstW);

  int k = muld(_qtAstR, _bsAstR);
  int quoteAssetReserveAfter = _isAdd ? (_qtAstR + quoteAssetAmountAdjusted) : (_qtAstR - quoteAssetAmountAdjusted);


  int baseAssetReserveAfter = divd(k, quoteAssetReserveAfter);
  int amountBaseAssetBoughtAbs = abs(baseAssetReserveAfter - _bsAstR);
  int amountBaseAssetBought = _isAdd ? amountBaseAssetBoughtAbs : (- amountBaseAssetBoughtAbs);
  
  var (
    int quoteAssetReserveAfter1,
    int baseAssetReserveAfter1
  ) = updateReserve(_isAdd, quoteAssetAmountAdjusted, amountBaseAssetBoughtAbs);

  ;; TODO: soft throw on priceImpact > maxPriceImpactValue
  return (
    amountBaseAssetBought,
    quoteAssetReserveAfter1,
    baseAssetReserveAfter1
  );
}

;; Computes position remaining margin with regards fof funding payment, rollover fee
;; and optionally applying a marginDelta - PnL or new margin (in case of position increase)
_ calcRemainMarginWithFundingPaymentAndRolloverFee(
  int _oldPositionSize, 
  int _oldPositionMargin, 
  int _oldPositionCumulativePremiumFraction,
  int _oldPositionLastUpdatedTimestamp,
  int _marginDelta
) inline {
  int fundingPayment = (_oldPositionSize != 0) ? muld((latestCumulativePremiumFraction(_oldPositionSize) - _oldPositionCumulativePremiumFraction), _oldPositionSize) : 0;

  int rolloverFee = calcRolloverFee(_oldPositionMargin, _oldPositionLastUpdatedTimestamp);
  int signedMargin = _marginDelta - rolloverFee - fundingPayment + _oldPositionMargin;
  var (int remainMargin, int badDebt) = signedMargin < 0 ? (0, abs(signedMargin)) : (abs(signedMargin), 0);

  return (remainMargin, badDebt, fundingPayment, rolloverFee);
}

int getQuoteAssetWeight(
  int b,
  int sz,
  int q,
  int p
) inline {
  int k = muld(q, b);
  int newB = b + sz;
  int newQ = divd(k, newB);
  int z = divd(newQ, newB);
  return divd(p, z);
}

_ getSyncTerminalPrice(int _terminalPrice, int _qtAstR, int _bsAstR) inline {
  int _positionSize = db::totalLongPositionSize - db::totalShortPositionSize;
  if (_positionSize == 0) {
    int newQtAstW = divd(_terminalPrice.muld(_bsAstR), _qtAstR);
    return (newQtAstW);
  } else {
    ;; Compute new qW and bW
    int newQtAstW = getQuoteAssetWeight(_bsAstR, _positionSize, _qtAstR, _terminalPrice);

    return newQtAstW;
  }
}

_ swapOutputWithReserves(
  int _isAdd, 
  int _baseAssetAmount,
  int _checkMaxPriceImpact,
  int _quoteAssetReserve,
  int _quoteAssetWeight,
  int _baseAssetReserve,
  int _baseAssetWeight
) inline {
  ;; Price before is computed to check for max price impact during trader
  int priceBefore = divd(_quoteAssetReserve.muld(_quoteAssetWeight), _baseAssetReserve.muld(_baseAssetWeight));

  ;; TODO: later handle _baseAssetAmount == 0

  int k = muld(_quoteAssetReserve, _baseAssetReserve);
  int baseAssetPoolAmountAfter = _isAdd ? (_baseAssetReserve + _baseAssetAmount) : (_baseAssetReserve - _baseAssetAmount);

  int quoteAssetAfter = divd(k, baseAssetPoolAmountAfter);
  int quoteAssetDelta = abs(quoteAssetAfter - _quoteAssetReserve);
  int quoteAssetSold = quoteAssetDelta.muld(_quoteAssetWeight);



  var (
    int quoteAssetReserveAfter1,
    int baseAssetReserveAfter1
  ) = updateReserve(~ _isAdd, quoteAssetDelta, _baseAssetAmount);

  return (
    quoteAssetSold,
    quoteAssetReserveAfter1,
    baseAssetReserveAfter1,
    db::totalLongPositionSize - (_isAdd ? abs(_baseAssetAmount) : 0),
    db::totalShortPositionSize - (~ _isAdd ? abs(_baseAssetAmount) : 0),
    0
  );
}


_ swapOutput(
  int _isAdd,
  int _baseAssetAmount,
  int _checkMaxPriceImpact
) inline {
  return swapOutputWithReserves(
    _isAdd,
    _baseAssetAmount,
    _checkMaxPriceImpact,
    db::quoteAssetReserve,
    db::quoteAssetWeight,
    db::baseAssetReserve,
    DECIMAL_UNIT
  );
}

_ getPositionAdjustedOpenNotional(
  int _positionSize, 
  int _option,
  int _quoteAssetReserve,
  int _quoteAssetWeight,
  int _baseAssetReserve,
  int _baseAssetWeight,
  int oraclePrice
) inline {
  int positionSizeAbs = abs(_positionSize);
  int isShort = _positionSize < 0;
  int positionNotional = 0;
  if (_option == PNL_OPTION_SPOT) {
    (positionNotional, _, _, _, _, _) = swapOutputWithReserves(
      ~ isShort,
      positionSizeAbs,
      false,
      _quoteAssetReserve,
      _quoteAssetWeight,
      _baseAssetReserve,
      _baseAssetWeight
    );
  } else {
    positionNotional = muld(positionSizeAbs, oraclePrice);
  }

  return positionNotional;
}

_ getPositionNotionalAndUnrealizedPnlByValues(
  int _positionSize, 
  int _positionOpenNotional, 
  int _quoteAssetReserve,
  int _quoteAssetWeight,
  int _baseAssetReserve,
  int _baseAssetWeight,
  int _option,
  int oraclePrice
) inline_ref {
  ;; TODO: should we check _positionSize == 0 here ?

  int isShort = _positionSize < 0;
  int positionNotional = getPositionAdjustedOpenNotional(
    _positionSize,
    _option,
    _quoteAssetReserve,
    _quoteAssetWeight,
    _baseAssetReserve,
    _baseAssetWeight,
    oraclePrice
  );

  int unrealizedPnl = isShort ? (_positionOpenNotional - positionNotional) : (positionNotional - _positionOpenNotional);
  return (
    positionNotional,
    unrealizedPnl
  );
}

int calcMarginRatio(int _remainMargin, int _badDebt, int _positionNotional) inline {
  return divd((_remainMargin - _badDebt), _positionNotional);
}

_ getMarginRatioByOption(
  int _positionSize,
  int _positionMargin,
  int _positionOpenNotional,
  int _positionLastUpdatedCPF,
  int _positionTimestamp,
  int _option,
  int oraclePrice
) inline {
  var (int positionNotional, int unrealizedPnl) = getPositionNotionalAndUnrealizedPnlByValues(_positionSize, _positionOpenNotional, db::quoteAssetReserve, db::quoteAssetWeight, db::baseAssetReserve, DECIMAL_UNIT, _option, oraclePrice);
  var (int remainMargin, int badDebt, _, _) = calcRemainMarginWithFundingPaymentAndRolloverFee(
    _positionSize,
    _positionMargin,
    _positionLastUpdatedCPF,
    _positionTimestamp,
    unrealizedPnl
  );

  return calcMarginRatio(remainMargin, badDebt, positionNotional);
}

;; Computes position spot margin ratio
int getMarginRatio(
  int _positionSize,
  int _positionMargin,
  int _positionOpenNotional,
  int _positionLastUpdatedCPF,
  int _positionTimestamp,
  int oraclePrice) inline {
    return getMarginRatioByOption(
      _positionSize,
      _positionMargin,
      _positionOpenNotional,
      _positionLastUpdatedCPF,
      _positionTimestamp,
      PNL_OPTION_SPOT,
      oraclePrice);
    }

_ internalClosePosition(
  int oldPositionSize,
  int oldPositionMargin,
  int oldPositionOpenNotional,
  int oldPositionLastUpdatedCPF, 
  int oldPositionTimestamp,
  int _size, 
  int _fee, 
  int _minQuoteAssetAmount,
  int _addToMargin,
  int _checkMaxPriceImpact,
  int _liquidate,
  int oraclePrice
  ) inline_ref {
  int isLongPosition = oldPositionSize > 0;
  int absOldPositionSize = abs(oldPositionSize);

  ;; TODO: handle this
  ;; if (~ ((_size <= absOldPositionSize) & (_size > 0))) {
  ;; }
  int isPartialClose = _size < absOldPositionSize;
  ;; Swap _size amount of position for exchangedQuoteAssetAmount of quote asset
  var (
    int exchangedQuoteAssetAmount,
    int quoteAssetReserveAfter, 
    int baseAssetReserveAfter,
    int totalPositionSizeAfter,
    _,
    _
  ) = swapOutput(
    oldPositionSize > 0,
    _size,
    _checkMaxPriceImpact);



  ;; exchangedPositionSize should always have a sign opposite to position
  ;; if position is short (-500) then +100 will decrease it (make it -400)
  ;; if position is long (500) then -100 will decrease it (make it 400)
  int exchangedPositionSize = oldPositionSize > 0 ? (- _size) : _size;
  
  ;; Compute actual notional value of position (notional value + pnl - funding)
  ;; and use it as a base to compute fee
  var (
    int oldPositionNotional, 
    int unrealizedPnl
  ) = getPositionNotionalAndUnrealizedPnlByValues(
    oldPositionSize,
    oldPositionOpenNotional,
    db::quoteAssetReserve,
    db::quoteAssetWeight,
    db::baseAssetReserve,
    DECIMAL_UNIT,
    PNL_OPTION_SPOT,
    oraclePrice
  );


    ;; Compute how much (in %) of position we are closing
    int realizedRatio = divd(abs(exchangedPositionSize), absOldPositionSize);

    ;; Realize PnL proportionally to the size of position being closed
    int realizedPnl = muld(unrealizedPnl, realizedRatio);

    ;; Get actual position margin *before* closing part of position 
    ;; and badDebt *after* part of PnL is realized
    var (int remainMarginBefore, int x1, int x2, int rolloverFee) = 
      calcRemainMarginWithFundingPaymentAndRolloverFee(
        oldPositionSize,
        oldPositionMargin,
        oldPositionLastUpdatedCPF,
        oldPositionTimestamp,
        unrealizedPnl
      );

    (_, int positionBadDebt, _, _) = 
      calcRemainMarginWithFundingPaymentAndRolloverFee(
        oldPositionSize,
        oldPositionMargin,
        oldPositionLastUpdatedCPF,
        oldPositionTimestamp,
        realizedPnl
      );

    ;; Realize fee (both close fee and rollover fee) proportionally to the size of position being closed
    int realizedFee = muld(oldPositionNotional, realizedRatio).muld(_fee) + rolloverFee.muld(realizedRatio);

    int unrealizedPnlAfter = unrealizedPnl - realizedPnl;
    
    ;; Compute new position notional value, keeping unrealized PnL unrealized
    ;; ex. long position
    ;; oldPositionNotional = 900 including -100 negative PnL
    ;; exchangedQuoteAssetAmount = 300 ~ 1/3 of position
    ;; unrealizedPnlAfter = 70 ~ 1/3 of position
    ;; remainOpenNotional = 900 - 300 - (-70) = 670, so it will be 600 after deducing PnL
   
    int remainOpenNotional = oldPositionSize > 0 ? 
      (oldPositionNotional - exchangedQuoteAssetAmount - unrealizedPnlAfter) 
      : (unrealizedPnlAfter + oldPositionNotional - exchangedQuoteAssetAmount);

    ;; exchangedPositionSize is always in different sign then oldPositionSize so always reduces position
    int newPositionSize = oldPositionSize + exchangedPositionSize;

    ;; If newPositionSize == 0 then we do not have to update CPF and notional.
    ;; forcing notional to be 0 helps prevent minor rounding mistakes
   
    (int newPositionOpenNotional, int newPositionLstUpdCPF) = newPositionSize == 0 ? 
      (0, 0) : 
      (abs(remainOpenNotional), latestCumulativePremiumFraction(newPositionSize));

    ;; Compute notional delta, that will be help us reduce it from cumulative notional.
    ;; Note, that cumulative notional is always added and subtracted without regards for PnL
    int openNotionalDelta = oldPositionOpenNotional - newPositionOpenNotional;


    ;; When partially closing a position AND removing part of margin to send to trader, position
    ;; should keep EXACTLY the margin ration it is currently on.
    int marginRatio = getMarginRatioByOption(oldPositionSize, oldPositionMargin, oldPositionOpenNotional, oldPositionLastUpdatedCPF, oldPositionTimestamp, PNL_OPTION_SPOT, oraclePrice);
 
    int newPositionMarginWithSameRatio = oldPositionSize > 0 ?
      (muld(newPositionOpenNotional + unrealizedPnlAfter, marginRatio) - unrealizedPnlAfter)
      : (muld(newPositionOpenNotional - unrealizedPnlAfter, marginRatio) - unrealizedPnlAfter);

    ;; This is how much margin we can return back to the trader, while position is closed while keeping MR the same
   
    int marginToTraderRaw = remainMarginBefore - (newPositionMarginWithSameRatio + unrealizedPnlAfter) - realizedFee;

    int marginToTrader = 0;
    if (marginToTraderRaw < 0) {
      ifnot (_liquidate) {
        ;; TODO: if marginToTraderRaw < 0 & ~ _liquidate => throw("Invalid internalClosePosition params: unable to pay fee")
      }
    } else {
      marginToTrader = marginToTraderRaw;
    }

    ;; If user opted for adding free margin back to position margin he can increase position MR.
    ;; This is basically realized profit / loss and use it to increase MR of a current position.
    ;; Used in partial liquidations as well.
    int newPositionMargin = _addToMargin ? (newPositionMarginWithSameRatio + marginToTrader) : newPositionMarginWithSameRatio;
    
  ;; Finally check slippage tolerance settings. It will always be 0 for liquidation.
  ;; TODO: check  if ((_minQuoteAssetAmount != 0) & (exchangedQuoteAssetAmount < _minQuoteAssetAmount)) -> safe throw


  return (
        newPositionSize,
        newPositionMargin,
        newPositionOpenNotional,
        newPositionLstUpdCPF,
        positionBadDebt,
        realizedPnl,
        (_addToMargin & isPartialClose) ? 0 : marginToTrader,
        quoteAssetReserveAfter,
        baseAssetReserveAfter,
        db::totalLongPositionSize - (isLongPosition ? abs(exchangedPositionSize) : 0),
        db::totalShortPositionSize - (~ isLongPosition ? abs(exchangedPositionSize) : 0),
        db::openInterestLong - (isLongPosition ? openNotionalDelta : 0),
        db::openInterestShort - (~ isLongPosition ? openNotionalDelta : 0),
        realizedFee,
        exchangedQuoteAssetAmount
  );
}

(int, int) distributeFee(int _feeAmount) inline {
  int feeToStakers = muld(_feeAmount, db::feeToStakersPercent);
  int feeToVault = _feeAmount - feeToStakers;

  return (feeToStakers, feeToVault);
}

int getSpotPrice() inline {
  int _quoteAssetReserve = db::quoteAssetReserve;
  int _baseAssetReserve = db::baseAssetReserve;
  int _qtAstW = db::quoteAssetWeight;
  int _bsAstW = DECIMAL_UNIT;

  return divd(_quoteAssetReserve.muld(_qtAstW), _baseAssetReserve.muld(_bsAstW));
}

;; Computes partial liquidation position size
int getPartialLiquidationAmount(        
    _positionSize,
    _positionMargin,
    _positionOpenNotional,
    _positionLastUpdatedCPF,
    _positionTimestamp,
    oracle_price
  ) inline {


  int margin_ratio = getMarginRatio(    
    _positionSize,
    _positionMargin,
    _positionOpenNotional,
    _positionLastUpdatedCPF,
    _positionTimestamp,
    oracle_price);    
  int maximumRatio = max(db::partialLiquidationRatio, DECIMAL_UNIT - divd(margin_ratio, db::maintenanceMarginRatio));
  int maxExchangedPositionSize = muld(abs(_positionSize), maximumRatio);
  
  var (_, _, _, _, _, priceImpact) = swapOutput(_positionSize > 0, maxExchangedPositionSize, false);

  return priceImpact < db::maxPriceImpact ? maxExchangedPositionSize : muld(abs(_positionSize), db::partialLiquidationRatio);
}

;; Checks if stop price and index price diverge more then spreadLimit. Used to determine what price to use
;; to compute liquidation. When isOverFluctuationLimit() == true, best of mark/index MR will be used 
int isOverFluctuationLimit(int oraclePrice) inline {
  int currentPrice = getSpotPrice();
  return divd(abs(oraclePrice - currentPrice), oraclePrice) > db::spreadLimit;
}


(int, int, int) getFunding(int underlyingPrice) inline {
  int spotPrice = getSpotPrice();
  int premium = spotPrice - underlyingPrice;

  if ((db::totalShortPositionSize == 0) | (db::totalLongPositionSize == 0)) {
    return (0, 0, 0);
  } 
  if (premium < 0) {
    ;; underlyingPrice > spotPrice, need to push spotPrice UP, short pays the longs
    ;; how much to take from shorts this funding period
    int shortPremiumFraction = divd(muld(premium, fundingPeriodDecimal), ONE_DAY);

    if (db::fundingMode == FM::FUNDING_ASYMMETRIC)  {
      int longPremiumFraction = divd(muld(shortPremiumFraction, db::totalShortPositionSize), db::totalLongPositionSize);

      return (shortPremiumFraction, longPremiumFraction, 0);
    } else {
      int shortTotalPremiumFraction = abs(muld(shortPremiumFraction, db::totalShortPositionSize));

      ;; how much longs will get (total)
      int longTotalPremiumFraction = abs(muld(shortPremiumFraction, db::totalLongPositionSize));

      ;; how much LP's will get 
      int premiumToVault = shortTotalPremiumFraction - longTotalPremiumFraction;


      return (shortPremiumFraction, shortPremiumFraction, premiumToVault);
    }
  } else {
    ;; underlyingPrice < spotPrice, need to push spotPrice DOWN, longs pays the shorts
    ;; how much to take from longs this funding period
    int longPremiumFraction = divd(muld(premium, fundingPeriodDecimal), ONE_DAY);

    if (db::fundingMode == FM::FUNDING_ASYMMETRIC) {
      int shortPremiumFraction = divd(muld(longPremiumFraction, db::totalLongPositionSize), db::totalShortPositionSize);

      return (shortPremiumFraction, longPremiumFraction, 0);
    } else {
      int longTotalPremiumFraction = abs(muld(longPremiumFraction, db::totalLongPositionSize));

      ;; how much short will get (total)
      int shortTotalPremiumFraction = abs(muld(longPremiumFraction, db::totalShortPositionSize));
        
      ;; how much LP's will get 
      int premiumToVault = longTotalPremiumFraction - shortTotalPremiumFraction;

      return (longPremiumFraction, longPremiumFraction, premiumToVault);
    }
  }
}

() syncTerminalPriceToOracle(int new_price) impure inline {
  db::quoteAssetWeight = getSyncTerminalPrice(new_price, db::quoteAssetReserve, db::baseAssetReserve);
}